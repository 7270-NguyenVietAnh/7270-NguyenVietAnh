<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Garbage Collection - Tag - Nguyễn Việt Anh Blog</title>
        <link>http://localhost:1313/7270-NguyenVietAnh/7270-NguyenVietAnh/tags/garbage-collection/</link>
        <description>Garbage Collection - Tag - Nguyễn Việt Anh Blog</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 26 Dec 2024 20:00:00 &#43;0800</lastBuildDate><atom:link href="http://localhost:1313/7270-NguyenVietAnh/7270-NguyenVietAnh/tags/garbage-collection/" rel="self" type="application/rss+xml" /><item>
    <title>Chuyên sâu về Java Memory Management</title>
    <link>http://localhost:1313/7270-NguyenVietAnh/7270-NguyenVietAnh/posts/java-memory-management/</link>
    <pubDate>Thu, 26 Dec 2024 20:00:00 &#43;0800</pubDate>
    <author>ChatGPT</author>
    <guid>http://localhost:1313/7270-NguyenVietAnh/7270-NguyenVietAnh/posts/java-memory-management/</guid>
    <description><![CDATA[<h1 id="chuyên-sâu-về-java-memory-management">Chuyên sâu về Java Memory Management</h1>
<p>Java Memory Management (quản lý bộ nhớ) là một phần quan trọng trong việc phát triển ứng dụng Java hiệu quả. Nó bao gồm cách bộ nhớ được phân bổ, sử dụng, và giải phóng tự động thông qua <strong>Garbage Collection</strong>.</p>
<hr>
<h2 id="các-vùng-bộ-nhớ-trong-java">Các vùng bộ nhớ trong Java</h2>
<p>Java Virtual Machine (JVM) quản lý bộ nhớ theo các vùng chính:</p>
<h3 id="1-heap">1. <strong>Heap</strong></h3>
<ul>
<li><strong>Mô tả</strong>: Dùng để lưu trữ các đối tượng và biến toàn cục.</li>
<li><strong>Quản lý</strong>: Heap được chia thành hai vùng chính:
<ul>
<li><strong>Young Generation</strong>: Chứa các đối tượng mới tạo. Bao gồm:
<ul>
<li><strong>Eden Space</strong>: Nơi khởi tạo đối tượng mới.</li>
<li><strong>Survivor Spaces</strong>: Lưu trữ các đối tượng sống sót sau mỗi chu kỳ GC.</li>
</ul>
</li>
<li><strong>Old Generation</strong>: Chứa các đối tượng tồn tại lâu dài.</li>
</ul>
</li>
</ul>
<h3 id="2-stack">2. <strong>Stack</strong></h3>
<ul>
<li><strong>Mô tả</strong>: Lưu trữ các biến cục bộ và khung ngăn xếp (stack frames) của từng luồng.</li>
<li><strong>Đặc điểm</strong>: Dữ liệu trong Stack có vòng đời ngắn và được quản lý tự động theo LIFO (Last In, First Out).</li>
</ul>
<h3 id="3-metaspace">3. <strong>Metaspace</strong></h3>
<ul>
<li><strong>Mô tả</strong>: Lưu trữ thông tin về các lớp (class metadata).</li>
<li><strong>Điểm khác biệt</strong>: Thay thế PermGen từ Java 8, với khả năng mở rộng động.</li>
</ul>
<hr>
<h2 id="garbage-collection-gc">Garbage Collection (GC)</h2>
<p>Garbage Collection tự động giải phóng bộ nhớ không còn được tham chiếu, giúp giảm nguy cơ rò rỉ bộ nhớ (memory leaks).</p>]]></description>
</item>
</channel>
</rss>
